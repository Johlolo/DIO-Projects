{"id":"index.ts","dependencies":[{"name":"C:\\Users\\johan\\Desktop\\Cursos\\DIO-Projects\\typescript\\package.json","includedInParent":true,"mtime":1656421067372}],"generated":{"js":"// types\n// interfaces"},"sourceMaps":{"js":{"mappings":[{"source":"index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":2,"column":0}}],"sources":{"index.ts":"// types\r\n// interfaces\r\n\r\n// interface IAnimal {\r\n//     name: string;\r\n//     type: 'land' | 'aquatic' | 'fly';\r\n//     domestic: boolean;\r\n// }\r\n\r\n// interface IFeline extends IAnimal {\r\n//     nightVistion: boolean;\r\n// }\r\n\r\n// interface ICanine extends IAnimal {\r\n//     size: 'small' | 'medium' | 'large';\r\n// }\r\n\r\n// type IDomestic = IFeline | ICanine;\r\n\r\n// const animal: IDomestic = {\r\n//     domestic: true,\r\n//     name: 'dog',\r\n//     size: 'medium',\r\n//     type: 'land',\r\n// }\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// Input types\r\n\r\n// const input = document.getElementById('input') as HTMLInputElement;\r\n\r\n// input.addEventListener('input', (event) => {\r\n//     const i = event.currentTarget as HTMLInputElement;\r\n//     console.log(i.value);\r\n// });\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// Generic Types\r\n\r\n// function addAppendixToList<T>(array: any[], value: T) {\r\n//     return array.map(item => item + value);\r\n// }\r\n\r\n// addAppendixToList([1, 2, 3], 'a');\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// interface IUser {\r\n//     id: string;\r\n//     email: string;\r\n//     position?: 'manager' | 'coordinator' | 'supervisor' | 'employee';  // When has '?' it turns optional\r\n// }\r\n\r\n// function redirect(user: IUser) {\r\n//     if (user.position) {\r\n//         // redirect(user.position);\r\n//     }\r\n\r\n//     // redirect to user's area\r\n// }\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// Readonly and private\r\n\r\n// interface Dog {\r\n//     name: string;\r\n//     age: number;\r\n//     favoritePlace?: string;\r\n// }\r\n\r\n// type DogReadOnly = {\r\n//     readonly [K in keyof Dog]-?: Dog[K];\r\n// }\r\n\r\n// class MyDog implements DogReadOnly {\r\n//     name;\r\n//     age;\r\n//     favoritePlace;\r\n\r\n//     constructor(name, age) {\r\n//         this.name = name;\r\n//         this.age = age;\r\n//     }\r\n// }\r\n\r\n// const dog = new MyDog('Jake', 6);\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// Using typings.d.ts  { 1 }\r\n\r\n// import $ from \"jquery\";\r\n\r\n// $.fn.extend({\r\n//     newFunction() {\r\n//         console.log('New function called');\r\n//     }\r\n// });\r\n\r\n// $('body').newFunction();\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ninterface Person {\r\n    name: string;\r\n    age: number;\r\n    nationality: string;\r\n}\r\n\r\ninterface Brazilian extends Omit<Person, 'nationality'> {\r\n\r\n}"},"lineCount":null}},"error":null,"hash":"663ffec595bac77bcbba405ede255e74","cacheData":{"env":{}}}